{"version":3,"sources":["containers/MainPage/logo.svg","components/Question/Question.js","components/QuestionCount/QuestionCount.js","components/Questionnaire/Questionnaire.js","components/Result/Result.js","constants/questions.js","containers/MainPage/MainPage.js","containers/App.js","constants/routes.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Question","_ref","onAnswerSelected","values","selectedAnswer","currentState","sensorID","questionIndex","react_default","a","createElement","className","question","replace","answers","map","answer","i","key","type","name","id","value","checked","isChecked","onChange","htmlFor","QuestionCount","props","counter","total","Questionnaire","handleNext","e","preventDefault","_this","handlePrev","handleAnswerSelected","target","_this$props","this","data","questionsList","components_QuestionCount_QuestionCount","length","components_Question_Question","find","x","index","reactstrap_es","outline","color","onClick","Component","Result","questions","SENSOR_ID","String","fromCharCode","Math","floor","random","MainPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","answerQuestion","state","setState","push","src","logo","alt","components_Result_Result","components_Questionnaire_Questionnaire","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","containers_App","document","getElementById","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac1cfa20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Question.css'\n\nfunction Question({\n  onAnswerSelected,\n  values,\n  selectedAnswer,\n  currentState,\n  sensorID,\n  questionIndex\n}) {\n  return (\n    <div className=\"\">\n      <h2 className=\"question\">{values.question.replace('{id}', sensorID)}</h2>\n      <ul className=\"answerOptions\">\n        {values.answers.map((answer, i) => {\n          return (\n            <li className=\"answerOption\" key={i}>\n              <input\n                type=\"radio\"\n                className=\"radioButton\"\n                name=\"radioGroup\"\n                id={i}\n                value={answer}\n                checked={Question.isChecked(\n                  currentState,\n                  answer,\n                  selectedAnswer\n                )}\n                onChange={onAnswerSelected}\n              />\n              <label className=\"radioLabel\" htmlFor={i}>\n                {answer}\n              </label>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nQuestion.isChecked = (currentState, answer, selectedAnswer) => {\n  if (currentState) {\n    return answer === currentState.answer\n  } else {\n    return false\n  }\n}\n\nQuestion.propTypes = {\n  onAnswerSelected: PropTypes.func.isRequired,\n  sensorID: PropTypes.string.isRequired,\n  values: PropTypes.object.isRequired,\n  selectedAnswer: PropTypes.object.isRequired,\n  currentState: PropTypes.object,\n  questionIndex: PropTypes.number.isRequired\n}\n\nexport default Question\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './QuestionCount.css'\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  )\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n}\n\nexport default QuestionCount\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Question from '../Question'\nimport QuestionCount from '../../components/QuestionCount'\nimport { Button } from 'reactstrap'\nimport './Questionnaire.css'\n\nclass Questionnaire extends Component {\n  componentDidMount() {}\n\n  handleNext = e => {\n    e.preventDefault()\n    this.props.handleNext()\n  }\n\n  handlePrev = e => {\n    e.preventDefault()\n    this.props.handlePrev()\n  }\n\n  handleAnswerSelected = e => {\n    this.props.handleAnswerSelected(e.target.value)\n  }\n\n  render() {\n    const { data, questionsList } = this.props\n    return (\n      <div className=\"questionnaire\">\n        <QuestionCount\n          counter={data.questionIndex}\n          total={questionsList.length}\n        />\n        <Question\n          values={data.questionsList[data.questionIndex - 1]}\n          selectedAnswer={data.selectedAnswer}\n          questionIndex={data.questionIndex}\n          sensorID={this.props.sensorID}\n          currentState={data.answers.find(x => x.index === data.questionIndex)}\n          onAnswerSelected={this.handleAnswerSelected}\n        />\n        <div className=\"buttonsGroup\">\n          <Button\n            className=\"button\"\n            outline\n            color=\"secondary\"\n            onClick={this.handlePrev}\n          >\n            Previous\n          </Button>\n          <Button\n            className=\"button\"\n            outline\n            color=\"secondary\"\n            onClick={this.handleNext}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nQuestionnaire.propTypes = {\n  data: PropTypes.object.isRequired,\n  questionsList: PropTypes.array.isRequired,\n  sensorID: PropTypes.string.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handlePrev: PropTypes.func.isRequired,\n  handleAnswerSelected: PropTypes.func.isRequired\n}\n\nexport default Questionnaire\n","import React, { Component } from 'react'\nimport './Result.css'\n\nclass Result extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"result\">\n          Most likely root causes went through analysis Successfully\n        </h1>\n        <h2 className=\"result\">we will inform you soon ...</h2>\n      </div>\n    )\n  }\n}\n\nexport default Result\n","const questions = [\n  {\n    question: 'Sensor {id} not pinging?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Base station {id} not pinging?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Average data quality at farm {id} is low?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Average data quality for sensor {id} is low?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Field access point {id} has a very high load?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Average latency between fap {id} and bs {id} is high?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Sensor {id} has very low signal strength?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'Fap {id} is not pinging to bs {id}?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'All base stations not pinging?',\n    answers: ['yes', 'no', 'maybe']\n  },\n  {\n    question: 'All farms have low data quality?',\n    answers: ['yes', 'no', 'maybe']\n  }\n]\n\nexport default questions\n","import React, { Component } from 'react'\nimport './MainPage.css'\nimport logo from './logo.svg'\n\nimport Questionnaire from '../../components/Questionnaire'\nimport Result from '../../components/Result'\nimport questionsList from '../../constants/questions'\n\n// Random SENSOR_ID auto generated everytime\nconst SENSOR_ID =\n  String.fromCharCode(65 + Math.floor(Math.random() * 26)) +\n  Math.floor(Math.random() * (999 - 100 + 1) + 100)\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counter: 0,\n      questionIndex: 1,\n      questionsList: questionsList,\n      answers: [],\n      selectedAnswer: {}\n    }\n  }\n\n  componentDidMount() {}\n\n  handleAnswerSelected = answer => {\n    // console.log('handleAnswerSelected', answer)\n    this.answerQuestion(this.state.questionIndex, answer)\n    this.setState({\n      selectedAnswer: { index: this.state.questionIndex, answer: answer }\n    })\n    // console.log('handleAnswerSelected', this.state.answers)\n  }\n\n  handleNext = answer => {\n    if (this.state.questionIndex < this.state.questionsList.length - 1) {\n      this.answerQuestion(\n        this.state.questionIndex,\n        this.state.selectedAnswer.answer\n      )\n      const counter = this.state.counter + 1\n      const questionIndex = this.state.questionIndex + 1\n      this.setState({\n        counter: counter,\n        questionIndex: questionIndex\n      })\n    }\n  }\n\n  handlePrev = answer => {\n    if (this.state.questionIndex === 1) return\n    const counter = this.state.counter - 1\n    const questionIndex = this.state.questionIndex - 1\n    this.setState({\n      counter: counter,\n      questionIndex: questionIndex\n    })\n  }\n\n  answerQuestion(index, answer) {\n    const answers = this.state.answers\n    if (answers.find(x => x.index === index)) {\n      answers[index - 1].answer = answer || 'maybe'\n    } else {\n      answers.push({ index: index, answer: answer || 'maybe' })\n    }\n    this.setState({\n      answers: answers\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Service disruption detected</h2>\n        </div>\n        {this.state.questionIndex === this.state.questionsList.length - 1 ? (\n          <Result />\n        ) : (\n          <Questionnaire\n            data={this.state}\n            questionsList={this.state.questionsList}\n            sensorID={SENSOR_ID}\n            handleNext={this.handleNext}\n            handlePrev={this.handlePrev}\n            handleAnswerSelected={this.handleAnswerSelected}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default MainPage\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport * as routes from '../constants/routes'\n\nimport MainPage from './MainPage'\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path={routes.MAIN} component={MainPage} />\n    </Switch>\n  </Router>\n)\n\nexport default App\n","export const MAIN = '/'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}